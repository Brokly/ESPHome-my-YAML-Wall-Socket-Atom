# шаблон SonOff Pow R316 V1.0
# в качестве двух настенных розеток с контролем тока и напряжения

esphome:
  name: $devicename
  on_boot:
    priority: 600
    then:
       - script.execute: script_show_text

esp8266:
  board: esp01_1m
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  manual_ip:
    static_ip: ${wifi_ip}
    gateway: !secret gateway 
    subnet: !secret subnet
    dns1: !secret dns1
    dns2: !secret dns2
  ap:
    ssid:  ${upper_devicename} Hotspot
    password: !secret ap_wifi_pass

logger:
    level: DEBUG
    #level: ERROR
    baud_rate: 0
    
api:

#mqtt:
#  broker: <Broker IP>
#  discovery: True

ota:
  password: !secret ota_pass

captive_portal:
    
web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret web_pass

uart:
  rx_pin: GPIO3
  baud_rate: 4800

dallas:
#нога 1-wire 
  - pin: GPIO1
    update_interval: 30s

binary_sensor:
#статус подключения устройства
  - platform: status
    name: ${upper_devicename} HA Connected
# кнопка на GPIO0 (на корпусе устройства)
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: True
    id: button
    internal: true
    on_click:
    # переключить реле при коротком нажатии   
    - min_length: 10ms
      max_length: 1000ms
      then:
        - switch.toggle: relay_sw
    # restart esp , нужно зажать кнопку на 5000 секунд (ПОСЧИТАТЬ ДО 8)
    - min_length: 4000ms
      max_length: 6000ms
      then:
        - switch.toggle: restart_sw_id
# индикатор срабатывания защиты и отключения реле
  - platform: template
    device_class: safety
    icon: mdi:chart-timeline-variant 
    name: $upper_devicename Overload  
    id: alert_id
    
light:
# для управления и индикации статуса загрузки
  - platform: status_led
    id: led
    internal: true
    pin: 
      number: GPIO13
      inverted: True
    
switch:
#свитч рестарта устройства
  - platform: restart
    name: ${upper_devicename} Restart SW
    id: restart_sw_id
# реле
  - platform: gpio
    id: relay
    pin: GPIO12
#виртуальная кнопка, совмещает реле и диод
  - platform: template
    restore_state: true
    name: $upper_devicename Relay
    optimistic: true
    id: relay_sw
    internal: false
    turn_on_action:
    - switch.turn_on: relay
    - light.turn_on: led
    # при включении сбрасываем индикатор аварии
    - lambda: |- 
        id(alert_id).publish_state(false);
    turn_off_action: 
    - switch.turn_off: relay
    - light.turn_off: led
#виртуальная кнопка, для скрытия длинного текста
  - platform: template
    name: $upper_devicename Hide Notes
    optimistic: true
    id: hide_notes
    entity_category: config
    icon: 'mdi:eye-off'
    turn_on_action:
      - script.execute: script_hide_text
    turn_off_action:
      - script.execute: script_show_text

sensor:
#датчик тока и напряжения
  - platform: cse7766 
    update_interval: 5s
    voltage:
      name: ${upper_devicename} Voltage
      filters:
        - calibrate_linear:
          - ${current_offset} -> 0.0
          - 220.0 -> 220.0
    current:
      name: ${upper_devicename} Current
      on_value_range:
      # при перегрузке - отключить реле, поднять флаг перегрузки
      - above: 15.0
        then:
        - switch.turn_off: relay_sw
        - lambda: |- 
            id(alert_id).publish_state(true);
            ESP_LOGE("This","Alarm ! Current %f , overload. Turn Off", x);
    power:
      name: ${upper_devicename} Power
    energy:
      name: ${upper_devicename} Energy
# датчик DALLAS для контроля нагрева
  - platform: dallas
    #address: ${dallas_senson_sn}
    index: 0
    id: temperature
    name: $upper_devicename Temperature
    filters:  
      -  offset: ${temperature_offset}    
      # при излишнем нагреве - отключить реле, поднять флаг защиты
    on_value_range:
      - above: 55.0
        then:
        - switch.turn_off: relay_sw
        - lambda: |- 
             id(alert_id).publish_state(true);
             ESP_LOGE("This","Alarm ! Temperature %f , overheating. Turn Off", x);
#датчик отображающий уровень сигнала Wifi
  - platform: wifi_signal
    name: $upper_devicename Signal
    update_interval: 60s
#время работы устройства после загрузки
  - platform: uptime
    name: ${upper_devicename} Uptime Sensor

text_sensor:
#версия прошивки
  - platform: version
    name: $upper_devicename ESPHome Version
#текстовая форма uptime    
  - platform: template
    name: ${upper_devicename} Uptime
    entity_category: diagnostic
    icon: 'mdi:timer'
    lambda: |-
      uint32_t dur=millis()/1000;
      char buffer[19];
      if(dur>=86400) sprintf(buffer,"%ud %uh %02um %02us", dur/86400, dur%86400/3600, dur%3600/60, dur%60);
      else if(dur>=3600) sprintf(buffer,"%uh %02um %02us", dur/3600, dur%3600/60, dur%60);
      else sprintf(buffer,"%um %02us", dur/60, dur%60);
      return {buffer};
#локализация устройства, скрывается на 10 минут при настройке времени работы девайса, так удобно для инета
  - platform: template
    name: ${upper_devicename} Location
    entity_category: diagnostic
    id: location
    icon: 'mdi:map-marker-radius'
#железо устройства (на основе чего сделано), скрывается на 10 минут при настройке времени работы девайса, так удобно для инета
  - platform: template
    name: ${upper_devicename} Hardware
    entity_category: diagnostic
    id: hardware
    icon: 'mdi:saw-blade'
#точка подключения Wifi
  - platform: wifi_info
    ssid:
      name: ${upper_devicename} Connected SSID
    bssid:
      name: ${upper_devicename} Connected BSSID 
#свободная память      
  - platform: template
    name: ${upper_devicename} Free Mem Size
    entity_category: diagnostic
    lambda: |-
      #ifdef ESP32
         size_t freeValue = heap_caps_get_free_size(MALLOC_CAP_DEFAULT);
      #else
         size_t freeValue = ESP.getFreeHeap();
      #endif
      char buffer[10];
      if(freeValue>=1024) sprintf(buffer,"%uKb", freeValue/1024);
      else sprintf(buffer,"%ub", freeValue);
      return {buffer};
      
script:
# процедура публикации большых текстовых кусков, сворачиваем для работы в веб морде
  - id: script_show_text
    then:
     -  lambda: |-
          id(location).publish_state("${location}");
          id(hardware).publish_state("Настенная розетка Atom (Одиночное реле с измерением параметров, max 16 Amp) + DS18B20.");
# процедура публикации большых текстовых кусков, сворачиваем для работы в веб морде
  - id: script_hide_text
    then:
     -  lambda: |-
          char buffer[]="Turn 'Hide Notes'";
          id(location).publish_state(buffer);
          id(hardware).publish_state(buffer);
      